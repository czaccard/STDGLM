[{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://czaccard.github.io/STDGLM/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to STDGLM","text":"STDGLM package provides framework fitting spatio-temporal dynamic generalized linear models. models useful analyzing data varies space time, allowing incorporation spatial temporal dependencies modeling process. package provides functions fitting models, well tools visualizing interpreting results.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to STDGLM","text":"can install package GitHub using following command: Run following command load package:","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\")   require(devtools) } devtools::install_github(\"czaccard/STDGLM\") library(STDGLM)"},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"quick-usage-example","dir":"Articles","previous_headings":"","what":"Quick Usage Example","title":"Introduction to STDGLM","text":"","code":"data(ApuliaAQ) p = length(unique(ApuliaAQ$AirQualityStation)) # 51 t = length(unique(ApuliaAQ$time))              # 365  # distance matrix W = as.matrix(dist(cbind(ApuliaAQ$Longitude[1:p], ApuliaAQ$Latitude[1:p])))  # response variable: temperature y = matrix(ApuliaAQ$CL_t2m, p, t) # covariates (intercept + altitude) X = array(1, dim = c(p, t, 2)) X[,,2] = matrix(ApuliaAQ$Altitude, p, t)  mod <- stdglm(y=y, X=X, W=W)"},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"detailed-explanation-on-supported-stdglms","dir":"Articles","previous_headings":"","what":"Detailed Explanation on supported STDGLMs","title":"Introduction to STDGLM","text":"Let p denote number spatial units (either georeferenced locations areal units) data collected, let T denote number time points. Generalized dynamic linear models (GDLMs) following observation equation can handled:      y_{} \\sim F \\\\     \\eta_{} = g\\left(E\\left( y_{} \\right)\\right) = \\boldsymbol{x}_{}' \\boldsymbol{\\beta}_{} + \\boldsymbol{z}_{}' \\boldsymbol{\\gamma} + \\epsilon_{}, \\quad \\epsilon_{} \\sim N(0, \\sigma_\\epsilon^2)  : y_{} response variable spatial unit =1, \\dots, p time t=1, \\dots, T, following exponential family distribution F, \\eta_{} corresponding linear predictor, defined using non-linear link function g(\\cdot), \\boldsymbol{x}_{} = (x_{1,}, \\dots, x_{J,})' J-dimensional (J\\ge 1) vector covariates spatial unit time t (intercept may may included ), \\boldsymbol{\\beta}_{} = (\\beta_{1,}, \\dots, \\beta_{J,})' state vector time t spatial unit , \\boldsymbol{z}_{} q-dimensional vector covariates whose effects constant (intercept may may included ), \\boldsymbol{\\gamma} vector non-varying coefficients, \\epsilon_{} observation error time t spatial unit . evolution state vector described state equation, follows ANOVA decomposition state vector, described later section.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"supported-distributions","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs","what":"Supported Distributions","title":"Introduction to STDGLM","text":"current version, following distributions outcome supported: Gaussian, Poisson, Bernoulli.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"anova-decomposition-of-the-state-vector","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs","what":"ANOVA Decomposition of the State Vector","title":"Introduction to STDGLM","text":"function stdglm allows decomposition state vector components can interpreted contributions different sources variability. Dropping subscript j sake simplicity, state vector \\beta_{} decomposed follows:  \\beta_{} = \\overline{\\beta} + \\beta_{}^{(\\mathsf{S})} + \\beta_{t}^{(\\mathsf{T})} + \\beta_{}^{(\\mathsf{ST})}  : \\overline{\\beta} overall mean effect, \\beta_{}^{(\\mathsf{S})} spatial effect spatial unit , \\beta_{t}^{(\\mathsf{T})} temporal effect time t, \\beta_{}^{(\\mathsf{ST})} interaction effect space time spatial unit time t.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"spatial-effects","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs > ANOVA Decomposition of the State Vector","what":"Spatial Effects","title":"Introduction to STDGLM","text":"spatial effects \\beta_{1}^{(\\mathsf{S})}, \\dots, \\beta_{p}^{(\\mathsf{S})} structured reflect spatial relationships. achieved assuming zero-mean Gaussian process exponential covariance function data point-referenced, denoted GP(0, \\rho_{1}, \\rho_{2}; exp):          Cov(\\beta_{}^{(\\mathsf{S})}, \\beta_{\\ell}^{(\\mathsf{S})}) = \\rho_{1} \\exp\\left(-\\frac{d_{\\ell}}{\\rho_{2}}\\right), \\quad d_{\\ell} = \\| \\boldsymbol{s}_i - \\boldsymbol{s}_\\ell \\|  \\rho_{1} partial sill, \\rho_{2} range parameter, d_{\\ell} Euclidean distance locations \\boldsymbol{s}_i \\boldsymbol{s}_\\ell. data areal, proper conditional autoregressive (PCAR) covariance structure assumed:      Var(\\beta_{1}^{(\\mathsf{S})}, \\dots, \\beta_{p}^{(\\mathsf{S})}) = \\rho_{1} \\left( \\boldsymbol{D}_w - \\rho_{2} \\boldsymbol{W} \\right)^{-1}  \\boldsymbol{W} binary adjacency matrix, \\boldsymbol{D}_w diagonal matrix row sums \\boldsymbol{W} diagonal, \\rho_{1} \\rho_{2} conditional variance autocorrelation parameters, respectively. zero-mean PCAR process denoted PCAR(0, \\rho_{1}, \\rho_{2}).","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"temporal-effects","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs > ANOVA Decomposition of the State Vector","what":"Temporal Effects","title":"Introduction to STDGLM","text":"temporal effects can specified three ways: autoregressive process order 1, denoted AR(1; \\phi^{(\\mathsf{T})}):    \\beta_{t}^{(\\mathsf{T})} = \\phi^{(\\mathsf{T})} \\beta_{t-1}^{(\\mathsf{T})} + \\eta_{t}^{(\\mathsf{T})}, \\quad \\eta_{t}^{(\\mathsf{T})} \\sim N(0, V_\\beta^{(\\mathsf{T})})  \\phi^{(\\mathsf{T})} temporal autocorrelation parameter V_\\beta^{(\\mathsf{T})} innovation variance. random walk, denoted RW, special case AR(1) process \\phi^{(\\mathsf{T})} = 1 seasonal component, denoted SEAS(q), q number harmonics include. seasonal component modeled :    \\beta_{t}^{(\\mathsf{T})} = \\boldsymbol{F} \\boldsymbol{\\theta}_t \\\\   \\boldsymbol{\\theta}_t = \\boldsymbol{G} \\boldsymbol{\\theta}_{t-1} + \\boldsymbol{\\eta}_t, \\quad \\boldsymbol{\\eta}_t \\sim N(0, V_\\beta^{(\\mathsf{T})} \\boldsymbol{}_{2q})  \\boldsymbol{F} = (1, 0, 1, 0, \\dots, 1, 0) 1 \\times 2q matrix, \\boldsymbol{G} 2q \\times 2q block diagonal matrix k-th block form        \\begin{pmatrix}       \\cos(2\\pi k / R) & \\sin(2\\pi k / R) \\\\       -\\sin(2\\pi k / R) & \\cos(2\\pi k / R)   \\end{pmatrix}, \\quad k=1, \\dots, q  R period seasonal component (e.g., R=12 monthly data yearly seasonality).","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"bayesian-hierarchical-structure","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs","what":"Bayesian Hierarchical Structure","title":"Introduction to STDGLM","text":"Gaussian outcomes, Bayesian model follows, t=1, \\dots, T j=1, \\dots, J (generalization distributions straightforward): \\begin{align*}     y_{} &\\sim N(\\boldsymbol{x}_{}' \\boldsymbol{\\beta}_{} + \\boldsymbol{z}_{}' \\boldsymbol{\\gamma}, \\sigma_\\epsilon^2) \\\\     \\boldsymbol{\\beta}_{j,t} &= \\boldsymbol{1}_p \\overline{\\beta}_j + \\boldsymbol{\\beta}_j^{(\\mathsf{S})} + \\boldsymbol{1}_p \\beta_{j,t}^{(\\mathsf{T})} + \\boldsymbol{\\beta}_{j,t}^{(\\mathsf{ST})} \\\\     \\boldsymbol{\\beta_j}^{(\\mathsf{S})} &= (\\beta_{j,1}^{(\\mathsf{S})}, \\dots, \\beta_{j,p}^{(\\mathsf{S})})' \\sim GP(0, \\rho_{j,1}^{(\\mathsf{S})}, \\rho_{j,2}^{(\\mathsf{S})}; exp) \\quad \\quad PCAR(0, \\rho_{j,1}^{(\\mathsf{S})}, \\rho_{j,2}^{(\\mathsf{S})}) \\\\     \\beta_{j,t}^{(\\mathsf{T})} &\\sim AR(1; \\phi_j^{(\\mathsf{T})}) \\quad \\quad RW \\quad \\quad SEAS(q_j) \\\\     \\boldsymbol{\\beta}_{j,t}^{(\\mathsf{ST})} &= (\\beta_{j,1t}^{(\\mathsf{ST})}, \\dots, \\beta_{j,pt}^{(\\mathsf{ST})})' \\sim GP(\\phi_j^{(\\mathsf{ST})} \\boldsymbol{\\beta}_{j,t-1}^{(\\mathsf{ST})}, \\rho_{j,1}^{(\\mathsf{ST})}, \\rho_{j,2}^{(\\mathsf{ST})}; exp) \\quad \\quad PCAR(\\phi_j^{(\\mathsf{ST})} \\boldsymbol{\\beta}_{j,t-1}^{(\\mathsf{ST})}, \\rho_{j,1}^{(\\mathsf{ST})}, \\rho_{j,2}^{(\\mathsf{ST})}) \\end{align*} model completed following priors (, dropping subscript j simplicity): \\begin{align*}     \\overline{\\beta} &\\sim N(0, V_\\gamma) \\\\     \\beta_{0}^{(\\mathsf{T})} &\\sim N(0, V_{\\beta_0}) \\\\     \\boldsymbol{\\beta}_{0}^{(\\mathsf{ST})} &\\sim N_p(0, V_{\\beta_0} \\boldsymbol{}_p) \\\\     \\boldsymbol{\\gamma} &\\sim N_q(0, V_\\gamma) \\\\     \\sigma_\\epsilon^2 &\\sim IG(a_\\epsilon, b_\\epsilon) \\\\     \\rho_1^{(\\mathsf{S})} &\\sim IG(a_{\\rho, S}, b_{\\rho, S}) \\\\     \\rho_2^{(\\mathsf{S})} &\\sim U(min_\\rho, max_\\rho) \\\\     \\rho_1^{(\\mathsf{ST})} &\\sim IG(a_{\\rho, ST}, b_{\\rho, ST}) \\\\     \\rho_2^{(\\mathsf{ST})} &\\sim U(min_\\rho, max_\\rho) \\\\     \\phi^{(\\mathsf{T})} &\\sim TN_{(-1, 1)}(0, 1) \\\\     \\phi^{(\\mathsf{ST})} &\\sim TN_{(-1, 1)}(0, 1) \\\\     V_\\beta^{(\\mathsf{T})} &\\sim IG(^{(\\mathsf{T})}, b^{(\\mathsf{T})}) \\end{align*} TN_{(q, r)}(\\mu, \\sigma^2) denotes normal distribution mean \\mu variance \\sigma^2 truncated interval (q, r). hyperparameters min_\\rho max_\\rho depend type spatial data. data point-referenced, set minimum maximum distances points divided 3, respectively. data areal, min_\\rho= 0.1 max_\\rho \\rightarrow 1. Note spacetime-varying coefficients assumed independent priori across j=1,\\dots,J.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/STDGLM.html","id":"efficient-inference-and-identifiability","dir":"Articles","previous_headings":"Detailed Explanation on supported STDGLMs","what":"Efficient Inference and Identifiability","title":"Introduction to STDGLM","text":"build efficient sampler, algorithm proposed Chan Jeliazkov (2009) used conjuction sparse matrix techniques. make model identifiable, constraints imposed varying parameters MCMC iteration: Set \\sum_{t=1}^{T} \\beta_{t}^{(\\mathsf{T})} = 0. Set \\sum_{=1}^{p} \\beta_{}^{(\\mathsf{S})} = 0. Set \\sum_{=1}^{p} \\beta_{,t}^{(\\mathsf{ST})} = 0 t=1,\\dots,T. Set \\sum_{t=1}^{T} \\beta_{,t}^{(\\mathsf{ST})} = 0 =1,\\dots,p.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/articles/a01_model_output.html","id":"model-output","dir":"Articles","previous_headings":"","what":"Model Output","title":"Details on Model Output","text":"output object class stdglm list elements ave . element ave contains posterior means model parameters, contains full MCMC output. ave lists well, elements change depending model fitted.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/a01_model_output.html","id":"ave-list","dir":"Articles","previous_headings":"Model Output","what":"ave list","title":"Details on Model Output","text":"Generally speaking, list ave contains following elements: Yfitted_mean, Yfitted2_mean: p--T matrices first two moments draws posterior predictive distribution observed data points. Ypred_mean, Ypred2_mean: p_{new}--T_{new} matrices first two moments draws posterior predictive distribution new data points (--sample predictions required). B_postmean, B2_postmean: First two moments overall effect varying coefficients. Btime_postmean, Btime2_postmean: First two moments temporal effect varying coefficients. Bspace_postmean, Bspace2_postmean: First two moments spatial effect varying coefficients. Bspacetime_postmean, Bspacetime2_postmean: First two moments spatio-temporal effect varying coefficients. B2_c_t_s_st: 2nd moment varying coefficients, \\beta_{}. Btime_pred_postmean, Btime_pred2_postmean: First two moments temporal effect varying coefficients predicted time points (--sample predictions required). Bspace_pred_postmean, Bspace_pred2_postmean: First two moments spatial effect varying coefficients predicted spatial locations (--sample predictions required). Bspacetime_pred_postmean, Bspacetime_pred2_postmean: First two moments spatio-temporal effect varying coefficients predicted spatial locations time points (--sample predictions required). B_pred2_c_t_s_st: 2nd moment varying coefficients, \\beta_{}, predicted spatial locations time points (--sample predictions required). meanY1mean: Contribution covariates varying coefficients, .e. \\boldsymbol{x}_{} multiplied effects. meanZmean: Contribution covariates non-varying effects, .e. \\boldsymbol{z}_{}' \\boldsymbol{\\gamma} (Z specified). thetay_mean: defined meanY1mean + meanZmean + offset. Eta_tilde_mean: Posterior mean linear predictor (non-Gaussian outcomes). Poisson outcomes, defined Eta_tilde_mean = thetay_mean + epsilon, epsilon Gaussian error term. Bernoulli outcomes, obtained drawing truncated normal distribution mean thetay_mean. DIC, Dbar, pD: Deviance Information Criterion, DIC = \\bar{D} + pD. WAIC, se_WAIC, pWAIC, se_pWAIC, elpd, se_elpd: Widely Applicable Information Criterion, penalty term, expected log pointwise predictive density. prefix se_ denotes standard errors. See Gelman et al. (2014) details. CRPS: Continuous Ranked Probability Score. positively oriented, .e. model highest mean score favoured (Gschlößl Czado 2007):  \\mathrm{CRPS}\\left(y_{}\\right)=\\frac{1}{2} E\\left|y_{r e p, {}}-\\tilde{y}_{r e p, {}}\\right|-E\\left|y_{r e p, {}}-y_{}\\right|  y_{r e p, {}} \\tilde{y}_{r e p, {}} independent replicates posterior predictive distribution. PMCC: Predictive model choice criterion. negatively oriented, .e. model lowest score favoured (Gelfand Ghosh 1998):  \\mathrm{PMCC}=\\sum_{=1}^p \\sum_{t=1}^T \\left\\{y_{}-E\\left(y_{r e p, {}} \\mid \\mathbf{y}\\right)\\right\\}^2+\\sum_{=1}^p \\sum_{t=1}^T \\operatorname{Var}\\left(y_{r e p, {}} \\mid \\mathbf{y}\\right) . pvalue_YgrYhat: T(y_{}, \\theta) = y_{}. pvalue_ResgrReshat: T(y_{}, \\theta) = r, r_{}=\\frac{y_{} - E\\left( y_{} \\mid \\theta \\right)}{\\operatorname{Var}\\left( y_{} \\mid \\theta \\right)} Pearson residuals. pvalue_chisquare: T(y, \\theta) = \\sum_{=1}^p \\sum_{t=1}^T r_{}^2 pvalue_perc95: T(y, \\theta) 95-th percentile distribution outcome spatial location. AccRate: Point-wise acceptance rate random-walk Metropolis-Hastings step (Poisson outcome). Note criteria (DIC, WAIC, p-values, etc.) computed using non-missing values response variable.","code":""},{"path":"https://czaccard.github.io/STDGLM/articles/a01_model_output.html","id":"out-list","dir":"Articles","previous_headings":"Model Output","what":"out list","title":"Details on Model Output","text":"list contains following elements: please see documentation function . Note function stdglm() return posterior draws varying coefficients, posterior summaries (.e., first two moments). done save memory, storing matrices can large.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Simulated Data Analysis","text":"following chunk generates covariates. randomly sample p=30 spatial locations within unit square. locations, generate J=3 covariates (X) whose effects vary spacetime, first one intercept, q=1 covariate (z) whose effect held constant. simulate varying coefficients plot .    Next, simulate response variable Y using observation equation. observation error assumed normally distributed mean zero variance \\sigma_\\epsilon^2 = 2.","code":"p = 30 set.seed(123) coords = data.frame(x = runif(p), y = runif(p)) D = as.matrix(dist(coords)) t = 100 J = 3 X = array(1, dim = c(p, t, J)) for (j in 2:J) {   for (t_ in 1:t) {     set.seed(j*t_)     X[, t_, j] = rnorm(p)   } } q=1 set.seed(10) z = array(rnorm(p*t*q), dim = c(p, t, q)) beta0 <- outer(   seq(0.7, 1.5, length.out = p),   -10*(seq(0,1,length.out = t)-0.5) - 50*(seq(0,1,length.out = t)-0.5)^2 + 10 )  tempo <- (1:t) beta1 <- outer(   - .6* (coords$x-.9)^2 + .6* (coords$y-.5)^2,   sin(tempo/t*2*pi) + 3, FUN = \"+\" )  beta2 = 4*outer(   - .6* (coords$x-.9)^2 + 1* (coords$y-.5)^2,   0.5*sin(tempo/t*2*pi) + 0.5*cos(tempo/t*4*pi),    FUN = \"+\" ) matplot(t(beta0), type = 'l', main = 'Beta 0', xlab = 'Time') matplot(t(beta1), type = 'l', main = 'Beta 1', xlab = 'Time') matplot(t(beta2), type = 'l', main = 'Beta 2', xlab = 'Time') gamma <- 1 set.seed(42) eps = matrix(rnorm(p*t, sd = sqrt(2)), nrow = p, ncol = t) Y <- beta0 + beta1*X[,,2] + beta2*X[,,3] + gamma*z[,,1] + eps matplot(t(Y), type = 'l', main = 'Y', xlab = 'Time')"},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Simulated Data Analysis","text":"fitting model, need prepare list prior hyperparameters. , assume vague priors parameters. also default values used prior=NULL. MCMC setup provided next chunk. can adjust number iterations, burn-period, thinning interval, parameters needed. point.referenced argument indicates data point-referenced, random.walk specifies want use random walk structure time-varying parameters. following command executes MCMC algorithm fit STDGLM model simulated data. stdglm function takes response variable Y, covariates X z, parameters defined . output object class stdglm, .e. list containing MCMC samples posterior summaries. output described separate article.","code":"prior_list = list(   V_beta_0 = 1e4,         # Prior variance of initial state   V_gamma = 1e6,          # Prior variance of constant coefficients   a_inn_time = 0.01,      # Prior shape for temporal variance   b_inn_time = 0.01,      # Prior rate for temporal variance   a_rho1s = 0.01,         # Prior shape for spatial variance   b_rho1s = 0.01,         # Prior rate for spatial variance   a_rho1st = 0.01,        # Prior shape for spatio-temporal variance   b_rho1st = 0.01,        # Prior rate for spatio-temporal variance   s2_a = 0.01,            # Prior shape for measurement error variance   s2_b = 0.01             # Prior rate for measurement error variance ) nburn <- 200                # burn-in period nrep <- 200                 # number of iterations to save after burn-in thin <- 1                   # thinning interval point.referenced = TRUE     # data are point-referenced random.walk = TRUE          # random walk structure for time-varying parameters print.interval = 50         # print message during execution of MCMC mod <- stdglm(y=Y, X=X, Z=z,                point.referenced=point.referenced,                random.walk=random.walk,                W=D,               nrep=nrep, nburn=nburn, thin=thin,                print.interval=print.interval,                prior=prior_list ) #> Starting MCMC (400 iterations)... #> Iteration: 50 / 400 #> Iteration: 100 / 400 #> Iteration: 150 / 400 #> Iteration: 200 / 400 #> Iteration: 250 / 400 #> Iteration: 300 / 400 #> Iteration: 350 / 400 #> Iteration: 400 / 400 #> MCMC finished."},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"fitted-coef-and-plot-methods","dir":"Articles","previous_headings":"Model Fitting","what":"fitted, coef and plot methods","title":"Simulated Data Analysis","text":"fitted method provides mean posterior predictive distribution observed data points. can also plot fitted values observed data specific location.  plot method returns object ggplot2 package, straightforward customize, save, arrange multiple plots.  Posterior summaries coefficients can extracted using coef method. show constant coefficients. plot method can also used visualize time-varying, space-varying, spacetime-varying coefficients. returned object ggplot object. label “Observed” indicates values refer observed spatio-temporal data points. time-varying spacetime-varying coefficients, 95% credible intervals (CI) within dashed lines, whereas space-varying coefficients posterior standard deviation shown location.          coef method can used also varying coefficients. example, can compare posterior mean spacetime-varying effect beta0 true value.","code":"fitted_values <- fitted(mod) print(dim(fitted_values)) #> [1]  30 100 summary(t(fitted_values[1:5,])) #>        V1                V2               V3                V4          #>  Min.   :-8.0731   Min.   :-8.794   Min.   :-10.041   Min.   :-12.383   #>  1st Qu.: 0.4735   1st Qu.: 1.875   1st Qu.:  2.092   1st Qu.:  0.539   #>  Median : 4.3935   Median : 5.713   Median :  5.392   Median :  6.080   #>  Mean   : 3.9990   Mean   : 4.886   Mean   :  4.699   Mean   :  5.044   #>  3rd Qu.: 6.9766   3rd Qu.: 8.587   3rd Qu.:  7.949   3rd Qu.:  9.050   #>  Max.   :16.5299   Max.   :13.997   Max.   : 14.391   Max.   : 16.155   #>        V5          #>  Min.   :-11.581   #>  1st Qu.:  1.693   #>  Median :  4.749   #>  Mean   :  4.766   #>  3rd Qu.:  8.407   #>  Max.   : 19.634 plot(mod, Y=Y, id=1) # pick a number between 1 and p g1 = plot(mod, Y=Y, id=1) # ggsave(\"plot1.png\", plot = g1) g2 = plot(mod, Y=Y, id=2) # ggsave(\"plot2.png\", plot = g2)  ggarrange(g1, g2, labels = c(\"#ID 1\", \"#ID 2\"), label.x = 0.8) print(coef(mod, 'overall')) #>         Mean         sd     ci_low     ci_high #> 1  6.3168361 0.02767138  6.2626011  6.37107097 #> 2  2.9331528 0.02717265  2.8798954  2.98641022 #> 3 -0.1092179 0.02771084 -0.1635301 -0.05490561 print(coef(mod, 'gamma')) #>       Mean         sd    ci_low  ci_high #> 1 1.006071 0.02622202 0.9546773 1.057466 plot(mod, 'tvc') #> [[1]] #>  #> [[2]] #>  #> [[3]] coords_sf = st_as_sf(coords, coords = c(\"x\", \"y\")) unit_square_coords <- matrix(   c(     0, 0,     1, 0,     1, 1,     0, 1,     0, 0   ),   ncol = 2,   byrow = TRUE ) region = st_sf(   geometry = st_sfc(st_polygon(list(unit_square_coords))) ) plot(mod, 'svc', coords_sf, region) #> [[1]] #>  #> [[2]] #>  #> [[3]] plot(mod, 'stvc', ids=c(1:9)) #> [[1]] #>  #> [[2]] #>  #> [[3]] st_effect_b0 = beta0 + mean(beta0) -    matrix(rowMeans(beta0), nrow = nrow(beta0), ncol = ncol(beta0)) -    matrix(colMeans(beta0), nrow = nrow(beta0), ncol = ncol(beta0), byrow = TRUE)  beta0_post = coef(mod, 'stvc') %>%   filter(Coef == 'beta0') %>%    mutate(Truth = as.vector(st_effect_b0)) %>%   filter(Space %in% 1:9) %>%    select(Space:Mean, Truth) %>%    pivot_longer(cols = c('Mean', 'Truth'), names_to = 'Type', values_to = 'Value') ggplot(beta0_post, aes(x = Time, y = Value, color = Type)) +   geom_line() +   facet_wrap(~ Space, nrow = 3) +   labs(title = \"Posterior Mean vs Truth for beta0\")"},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"trace-plots","dir":"Articles","previous_headings":"Model Fitting","what":"Trace plots","title":"Simulated Data Analysis","text":"can also visualize trace plots MCMC samples parameters interest. purpose, can convert output mcmc object, use plot function coda package.","code":"plot(mcmc(t(mod$out$sigma2))) # measurement error variance plot(mcmc(t(mod$out$sigma2_Btime))) # evolution variances of temporal effects for j=1,...,J plot(mcmc(t(mod$out$rho1_space))) # partial sill of spatial effects for j=1,...,J plot(mcmc(t(mod$out$rho2_space))) # range of spatial effects for j=1,...,J plot(mcmc(t(mod$out$rho1_spacetime))) # partial sill of spatio-temporal effects for j=1,...,J plot(mcmc(t(mod$out$rho2_spacetime))) # range of spatio-temporal effects for j=1,...,J if (!random.walk) {   plot(mcmc(t(mod$out$phi_AR1_time))) # AR(1) coefficient for temporal evolution for j=1,...,J   plot(mcmc(t(mod$out$phi_AR1_spacetime))) # AR(1) coefficient for spatio-temporal evolution for j=1,...,J } plot(mcmc(t(mod$out$gamma))) #  coefficient of the z covariate"},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"restoring-previous-state","dir":"Articles","previous_headings":"Model Fitting","what":"Restoring previous state","title":"Simulated Data Analysis","text":"MCMC algorithm converged yet, however easy continue previous chain. just need provide mod argument stdglm function. MCMC continue last saved state. Note previous samples discarded.","code":"mod <- stdglm(y=Y, X=X, Z=z,                point.referenced=point.referenced,                random.walk=random.walk,                W=D,               nrep=nrep, nburn=nburn, thin=thin,                print.interval=print.interval,                prior=prior_list,               last_run = mod )"},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"model-selection-and-comparison","dir":"Articles","previous_headings":"Model Fitting","what":"Model Selection and Comparison","title":"Simulated Data Analysis","text":"stdglm object also contains tools model selection comparison, including Deviance Information Criterion (DIC), Widely Applicable Information Criterion (WAIC), scoring rules Bayesian p-values. described separate article.","code":"print(mod$ave$DIC) #> [1] 10942.04 print(mod$ave$WAIC) #> [1] 10964.29"},{"path":"https://czaccard.github.io/STDGLM/articles/a02_fit_simulated.html","id":"temporal-predictions-and-spatial-interpolation","dir":"Articles","previous_headings":"","what":"Temporal predictions and Spatial interpolation","title":"Simulated Data Analysis","text":"section, demonstrate perform --sample predictions. create grid new spatial locations generate new covariates locations. also assume want predict next 10 time points, set h_ahead = 10. new covariates generated similar way , now p_new locations t_new = t + h_ahead time points. function stdglm performs spatial interpolation using blocked structure. useful number new spatial locations large. Therefore, three lists created store indices new locations (blocks_indices), distance matrices prediction locations (D_pred), cross-distance matrices (D_cross). following code chunk, block made just one location. following command fits STDGLM model, continuing previous run. also possibility set number cores parallel processing using ncores argument: value greater 1, spatial predictions performed parallel MCMC iteration. plot method can used visualize posterior predictive summaries (posterior mean 95% CIs) varying coefficients. observed spatio-temporal points clearly distinguished predicted ones.          predict method can used easily access posterior predictive summaries, response variable, shown , varying coefficients. input Coo_sf_pred (optional) allows return simple feature object, may useful plotting.","code":"st_new = st_make_grid(region, what = \"centers\", n = c(20, 20)) p_new = NROW(st_new) h_ahead = 10 t_new = t + h_ahead  coords_pred = as.data.frame(st_coordinates(st_new)) names(coords_pred) = names(coords)  Xpred = array(1, dim = c(p_new, t_new, J)) for (j in 2:J) {   for (t_ in 1:t_new) {     set.seed(j*t_*2)     Xpred[, t_, j] = rnorm(p_new)   } }  q=1 set.seed(10*8) zpred = array(rnorm(p_new * t_new * q), dim = c(p_new, t_new, q)) ii = floor(seq(1, p_new+1, by = 1)) lii = length(ii)  D_pred = D_cross = blocks_indices = vector('list', lii-1) for (i in 2:lii) {   Dalltemp = as.matrix(dist(rbind(coords, coords_pred[ii[i-1]:(ii[i]-1), ])))   D_pred[[i-1]] = unname(Dalltemp[-(1:p), -(1:p), drop=FALSE])   D_cross[[i-1]] = unname(Dalltemp[1:p, -(1:p), drop=FALSE])   blocks_indices[[i-1]] = ii[i-1]:(ii[i]-1) } mod <- stdglm(y=Y, X=X, Z=z,                point.referenced=point.referenced,                random.walk=random.walk,                blocks_indices=blocks_indices,               W=D, W_pred=D_pred, W_cross=D_cross,               X_pred=Xpred, Z_pred=zpred,               ncores = 1, # Set number of cores for parallel processing               nrep=nrep, nburn=nburn, thin=thin,                print.interval=print.interval,                prior=prior_list,               last_run = mod ) #> Restarting MCMC from previous state... #> Starting MCMC (400 iterations)... #> Iteration: 50 / 400 #> Iteration: 100 / 400 #> Iteration: 150 / 400 #> Iteration: 200 / 400 #> Iteration: 250 / 400 #> Iteration: 300 / 400 #> Iteration: 350 / 400 #> Iteration: 400 / 400 #> MCMC finished. plot(mod, 'tvc') #> [[1]] #>  #> [[2]] #>  #> [[3]] coords_pred_sf = st_as_sf(coords_pred, coords = c(\"x\", \"y\")) plot(mod, 'svc', coords_sf, region, coords_pred_sf) #> [[1]] #>  #> [[2]] #>  #> [[3]] plot(mod, 'stvc', ids=c(1:9), pred = TRUE) # first 9 new locations #> [[1]] #>  #> [[2]] #>  #> [[3]] Y_pred = predict(mod, type = 'response_df', Coo_sf_pred = coords_pred_sf) ggplot(Y_pred %>% filter(Time==10)) +     geom_sf(data = region, fill = \"white\") +     geom_sf(aes(color = Mean)) +     labs(title = \"Predicted outcome at time 10\")"},{"path":"https://czaccard.github.io/STDGLM/articles/a03_apulia_aq.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Analysis of Apulia Air Quality Data","text":"data can loaded using following command. definition column can found link. Next, download shapefile Apulia region create maps. Note apulia_sf uses Universal Transverse Mercator (UTM) projection, given EPSG code 32633, coordinates defined meters. However, convenient convert kilometers, follows. also convert ApuliaAQ dataframe simple feature object.","code":"# load data data(ApuliaAQ) ApuliaAQ = ApuliaAQ %>% filter(time>='2022-06-01') head(ApuliaAQ) #>   AirQualityStation       time Longitude Latitude Altitude #> 1       STA.IT1953A 2022-06-01  18.17361 40.16805       50 #> 2       STA.IT1687A 2022-06-01  18.09507 40.34627       10 #> 3       STA.IT2044A 2022-06-01  18.17667 40.35194       50 #> 4       STA.IT1932A 2022-06-01  18.17306 40.36444       58 #> 5       STA.IT2150A 2022-06-01  18.12500 40.40333      100 #> 6       STA.IT1666A 2022-06-01  18.02972 40.40444       10 #>   AirQualityStationType AirQualityStationArea AQ_mean_NO2 AQ_mean_PM10 #> 1            industrial              suburban    9.165000           NA #> 2            background              suburban          NA     23.40000 #> 3               traffic                 urban   15.396875     29.40000 #> 4               traffic                 urban    6.584167     24.00000 #> 5            background                 rural   11.384167     25.70104 #> 6            background              suburban   15.330625     29.60000 #>   AQ_mean_PM2.5   CL_blh CL_lai_hv CL_lai_lv    CL_rh  CL_ssr   CL_t2m CL_tp #> 1           9.4 375.9880  1.728394  2.132446 70.08264 3099264 24.84413     0 #> 2            NA 616.1546  1.047241  2.083252 67.86420 2982720 25.06085     0 #> 3          12.5 375.9880  1.728394  2.132446 70.08264 3099264 24.84413     0 #> 4           8.5 375.9880  1.728394  2.132446 70.08264 3099264 24.84413     0 #> 5            NA 544.1208  1.984253  2.900024 64.76970 2982912 25.43316     0 #> 6           4.7 544.1208  1.984253  2.900024 64.76970 2982912 25.43316     0 #>   CL_winddir CL_windspeed #> 1          1     2.528502 #> 2          1     2.261226 #> 3          1     2.528502 #> 4          1     2.528502 #> 5          1     2.855337 #> 6          1     2.855337 if (! file.exists(\"confiniregionali.zip\")) {   download.file(     \"https://dati.puglia.it/ckan/dataset/9e105292-26d3-49b3-ae2c-e19a987886bc/resource/212e8004-5af4-467f-b910-1183bdc21730/download/confiniregionali.zip\",     destfile = \"confiniregionali.zip\"   ) }  apulia_sf = st_read(\"/vsizip/confiniregionali.zip/ConfiniRegionali/\", layer = \"ConfiniRegionali\") #> Reading layer `ConfiniRegionali' from data source  #>   `/vsizip/confiniregionali.zip/ConfiniRegionali/' using driver `ESRI Shapefile' #> Simple feature collection with 1 feature and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 494422.8 ymin: 4409765 xmax: 800058.5 ymax: 4675192 #> Projected CRS: WGS 84 / UTM zone 33N projUTM = \"+proj=utm +zone=33 +datum=WGS84 +units=km +no_defs\" apulia_sf = st_transform(apulia_sf, projUTM) data = ApuliaAQ %>%    st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%    st_transform(projUTM)"},{"path":"https://czaccard.github.io/STDGLM/articles/a03_apulia_aq.html","id":"spatial-locations-for-interpolation","dir":"Articles","previous_headings":"Data Preparation","what":"Spatial Locations for Interpolation","title":"Analysis of Apulia Air Quality Data","text":"","code":"st_new = st_make_grid(apulia_sf, what = \"centers\", cellsize = 5) %>%    st_intersection(apulia_sf) p_new = NROW(st_new) h_ahead = 0"},{"path":"https://czaccard.github.io/STDGLM/articles/a03_apulia_aq.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"","what":"Exploratory Analysis","title":"Analysis of Apulia Air Quality Data","text":"first exploratory tool map yearly average NO2 concentrations.  red points pinpoint stations without valid measurement. However, percentage missing data highly variable across stations.  Let’s now visualize data temporally, taking average across space.  figure , small gaps indicating data days. Missing observations response issue fitting model, since NA values estimated using posterior predictive distribution. Important: stdglm function handle missing data response, covariates!","code":"yearly_avg = data %>%    group_by(AirQualityStation) %>%    summarise(AQ_mean_NO2 = mean(AQ_mean_NO2, na.rm=T),             AirQualityStation = first(AirQualityStation),             AirQualityStationType = first(AirQualityStationType),     .groups = 'drop')  ggplot() +   geom_sf(data = apulia_sf) +   geom_sf(aes(col = AQ_mean_NO2, shape = AirQualityStationType), yearly_avg, size = 3) +   scale_color_viridis_c(na.value = \"red\") +   labs(title = \"2022 average NO2 concentrations\") perc_na = data %>%    group_by(AirQualityStation) %>%    summarise(Percentage = mean(is.na(AQ_mean_NO2)),             AirQualityStation = first(AirQualityStation),     .groups = 'drop')  print(summary(perc_na$Percentage)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.04206 0.06776 0.08411 0.13478 0.12850 1.00000  ggplot() +   geom_sf(data = apulia_sf) +   geom_sf(aes(col = Percentage), perc_na, size = 3) +   scale_color_viridis_c(limits = c(0,1)) +   labs(title = \"Percentage of missing data\") space_avg = ApuliaAQ %>%    group_by(time) %>%    summarise(across(where(is.numeric), ~ mean(.x, na.rm=T)),     .groups = 'drop') ggplot(space_avg, aes(time, AQ_mean_NO2)) +   geom_line() +   theme(legend.position = 'none') #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://czaccard.github.io/STDGLM/articles/a03_apulia_aq.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Analysis of Apulia Air Quality Data","text":"purpose illustration, assume NO2 concentrations follows Gaussian distribution mean simple linear spatio-temporal trend, variance separable spatio-temporal structure (exponential spatial correlation function, AR(1) temporal dependence). actually fitting model, preliminaries required organize data correct form. creation object spatial interpolation also required, shown .","code":"p = length(unique(data$AirQualityStation)) # 51 t = length(unique(data$time))              # 365 times = unique(data$time)  # distance matrix D = drop_units(st_distance(yearly_avg))  # response variable (log scale) y = matrix(scale(log(data$AQ_mean_NO2)), p, t)  # covariates X = abind(   matrix(1, p, t),   along = 3) which(is.na(X)) # NA's are not allowed here! #> integer(0)  Z = abind(   matrix(st_coordinates(data)[,1]/1e3, p, t),   matrix(st_coordinates(data)[,2]/1e3, p, t),   matrix((st_coordinates(data)[,1]/1e3)^2, p, t),   matrix((st_coordinates(data)[,2]/1e3)^2, p, t),   matrix(as.numeric(data$time)/2e4, p, t),   along = 3) which(is.na(Z)) # NA's are not allowed here! #> integer(0)  # # covariates # X = abind( #   matrix(1, p, t),  #   matrix(scale(data$CL_t2m), p, t), #   matrix(scale(data$CL_windspeed), p, t), #   matrix(scale(data$CL_ssr), p, t), #   matrix(scale(data$CL_blh), p, t), #   along = 3) # which(is.na(X)) # NA's are not allowed here!  # Z = model.matrix(~AirQualityStationType, data)[,-1, drop=FALSE] # types industrial and traffic wrt backgroud # dim(Z) = c(p, t, NCOL(Z)) # reshape in the correct way # Z = abind(Z, #   matrix(scale(data$Altitude), p, t), #   matrix(scale(as.numeric(data$time)), p, t), #   along = 3) # which(is.na(Z)) # NA's are not allowed here! ii = floor(seq(1, p_new+1, by = 10)) lii = length(ii)  D_pred = D_cross = blocks_indices = vector('list', lii-1) for (i in 2:lii) {   Dalltemp = drop_units(st_distance(     c(st_geometry(yearly_avg), st_geometry(st_new[ii[i-1]:(ii[i]-1), ])))     )   D_pred[[i-1]] = unname(Dalltemp[-(1:p), -(1:p), drop=FALSE])   D_cross[[i-1]] = unname(Dalltemp[1:p, -(1:p), drop=FALSE])   blocks_indices[[i-1]] = ii[i-1]:(ii[i]-1) }  Xpred = abind(   matrix(1, p_new, t),   along = 3)  Zpred = abind(   matrix(st_coordinates(st_new)[,1]/1e3, p_new, t),   matrix(st_coordinates(st_new)[,2]/1e3, p_new, t),   matrix((st_coordinates(st_new)[,1]/1e3)^2, p_new, t),   matrix((st_coordinates(st_new)[,2]/1e3)^2, p_new, t),   outer(rep(1, p_new), as.numeric(times)/2e4),   along = 3) # Set the total number of iterations nrep <- 3000 # Set the total number of burn-in iterations nburn <- 3000 # How many times to report progress print.interval <- 100  mod <- stdglm(y=y, X=X, Z=Z,               blocks_indices=blocks_indices,               W=D, W_pred=D_pred, W_cross=D_cross,               X_pred=Xpred, Z_pred=Zpred,               interaction = FALSE,               nrep = nrep, nburn = nburn,                print.interval = print.interval,               ncores = min(parallel::detectCores()-1, 6), # Set number of cores for parallel processing               keepLogLik = FALSE) # to save memory"},{"path":"https://czaccard.github.io/STDGLM/articles/a03_apulia_aq.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the Results","title":"Analysis of Apulia Air Quality Data","text":"create maps NO2 concentrations Apulia, can use predict method. , posterior means shown selected days.","code":"Y_pred = predict(mod, type = 'response_df', Coo_sf_pred = st_geometry(st_new)) mean_y = mean(log(data$AQ_mean_NO2), na.rm=T) sd_y = sd(log(data$AQ_mean_NO2), na.rm=T) Y_pred$NO2 = exp(Y_pred$Mean*sd_y + mean_y) rr = range(Y_pred$NO2)  gglist = list() ind = 1 for (i in c(10, 50, 100, 130, 170, 200)) {   gglist[[ind]] =      ggplot(Y_pred %>% filter(Time==i)) +     geom_sf(data = apulia_sf, fill = \"white\") +     geom_sf(aes(color = NO2)) +     scale_color_viridis_c(limits=rr) +     labs(title = paste0(\"NO2 Predictions, \", times[i]))   ind = ind+1 }  ggarrange(plotlist=gglist, ncol=3, nrow=2) ggsave(\"pred_no2_apulia.png\", width = 30, height = 20, units = \"cm\")"},{"path":"https://czaccard.github.io/STDGLM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlo Zaccardi. Author, maintainer.","code":""},{"path":"https://czaccard.github.io/STDGLM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zaccardi C (2025). STDGLM: Spatio-Temporal Dynamic Generalized Linear Models. R package version 0.2.0, https://github.com/czaccard/STDGLM.","code":"@Manual{,   title = {STDGLM: Spatio-Temporal Dynamic Generalized Linear Models},   author = {Carlo Zaccardi},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/czaccard/STDGLM}, }"},{"path":"https://czaccard.github.io/STDGLM/index.html","id":"stdglm-","dir":"","previous_headings":"","what":"Spatio-Temporal Dynamic Generalized Linear Models","title":"Spatio-Temporal Dynamic Generalized Linear Models","text":"R package: Spatio-Temporal Dynamic Generalized Linear Models (STDGLM) Carlo Zaccardi STDGLM package provides framework fitting spatio-temporal dynamic generalized linear models. models useful analyzing data varies space time, allowing incorporation spatial temporal dependencies modeling process. package provides functions fitting models, well tools visualizing interpreting results.","code":""},{"path":"https://czaccard.github.io/STDGLM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatio-Temporal Dynamic Generalized Linear Models","text":"","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\")   require(devtools) } devtools::install_github(\"czaccard/STDGLM\")"},{"path":"https://czaccard.github.io/STDGLM/index.html","id":"quick-usage-example","dir":"","previous_headings":"","what":"Quick Usage Example","title":"Spatio-Temporal Dynamic Generalized Linear Models","text":"","code":"data(ApuliaAQ) p = length(unique(ApuliaAQ$AirQualityStation)) # 51 t = length(unique(ApuliaAQ$time))              # 365  # distance matrix W = as.matrix(dist(cbind(ApuliaAQ$Longitude[1:p], ApuliaAQ$Latitude[1:p])))  # response variable: temperature y = matrix(ApuliaAQ$CL_t2m, p, t) # covariates (intercept + altitude) X = array(1, dim = c(p, t, 2)) X[,,2] = matrix(ApuliaAQ$Altitude, p, t)  mod <- stdglm(y=y, X=X, W=W)"},{"path":"https://czaccard.github.io/STDGLM/index.html","id":"to-do","dir":"","previous_headings":"","what":"TO-DO","title":"Spatio-Temporal Dynamic Generalized Linear Models","text":"Allow different prior distributions variances ranges Add bool decide whether save VC draws","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/ApuliaAQ.html","id":null,"dir":"Reference","previous_headings":"","what":"Apulia Air Quality Data — ApuliaAQ","title":"Apulia Air Quality Data — ApuliaAQ","text":"Daily measurements air pollutant concentrations, recorded 51 ground-based monitoring stations Apulia (Italy) 2022, along related climate variables. subset data GRINS AQCLIM dataset (see link ).","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/ApuliaAQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apulia Air Quality Data — ApuliaAQ","text":"","code":"ApuliaAQ"},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/ApuliaAQ.html","id":"apuliaaq","dir":"Reference","previous_headings":"","what":"ApuliaAQ","title":"Apulia Air Quality Data — ApuliaAQ","text":"data frame 18,615 rows 19 columns: AirQualityStation Unique station identifier time Date measurement Longitude, Latitude Geographic coordinates using WGS-84 reference system Altitude Altitude measurement station (m) AirQualityStationType predominant type emission sources station's vicinity AirQualityStationArea type area surrounding station AQ_mean_NO2, AQ_mean_PM10, AQ_mean_PM2.5 Air pollutant concentrations (micrograms per cubic meter) CL_blh Daily mean height atmosphere boundary layer (m) CL_lai_hv Daily fixed value high vegetation leaf area index (m2/m2) CL_lai_lv Daily fixed value low vegetation leaf area index (m2/m2) CL_rh Daily mean relative humidity (percent) CL_ssr Daily maximum surface solar radiation (J/m2) CL_t2m Daily mean air temperature 2 meters (Celsius) CL_tp Daily cumulative total precipitation (m) CL_winddir Daily mode wind direction (1=N, 2=E, 3=S, 4=W) CL_windspeed Daily mean wind speed (m/s)","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/ApuliaAQ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Apulia Air Quality Data — ApuliaAQ","text":"https://doi.org/10.5281/zenodo.15699805","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients in stdglm objects — coef.stdglm","title":"Coefficients in stdglm objects — coef.stdglm","text":"Extracts coefficients stdglm object.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients in stdglm objects — coef.stdglm","text":"","code":"# S3 method for class 'stdglm' coef(object, type = \"overall\", ...)"},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients in stdglm objects — coef.stdglm","text":"object stdglm object. type character string indicating type coefficients. Options : overall: Overall effects varying coefficients. tvc: Temporal effects varying coefficients. svc: Spatial effects varying coefficients. stvc: Spatio-temporal effects varying coefficients. gamma: Effects covariates specified input Z (see stdglm). ... Additional arguments (currently ignored).","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients in stdglm objects — coef.stdglm","text":"dataframe posterior mean 95% credible intervals.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coefficients in stdglm objects — coef.stdglm","text":"Extracts posterior mean 95% credible intervals coefficients according type.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/coef.stdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficients in stdglm objects — coef.stdglm","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `mod` is a fitted stdglm object print(coef(mod, 'overall')) print(coef(mod, 'gamma')) betaST_post = coef(mod, 'stvc') # returns a data.frame head(betaST_post) } # }"},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted values for stdglm objects — fitted.stdglm","title":"Fitted values for stdglm objects — fitted.stdglm","text":"Extracts fitted values stdglm object.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted values for stdglm objects — fitted.stdglm","text":"","code":"# S3 method for class 'stdglm' fitted(object, ...)"},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted values for stdglm objects — fitted.stdglm","text":"object stdglm object. ... Additional arguments (currently ignored).","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted values for stdglm objects — fitted.stdglm","text":"matrix fitted values.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted values for stdglm objects — fitted.stdglm","text":"Extracts posterior mean predictive distribution observed data points.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/fitted.stdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted values for stdglm objects — fitted.stdglm","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `mod` is a fitted stdglm object fitted_values <- fitted(mod) summary(t(fitted_values[1:5,])) # Extract temporal summaries for the first 5 locations } # }"},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting functions for stdglm objects — plot.stdglm","title":"Plotting functions for stdglm objects — plot.stdglm","text":"Plotting functions stdglm objects.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting functions for stdglm objects — plot.stdglm","text":"","code":"# S3 method for class 'stdglm' plot(x, type = \"fitted\", ...)"},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting functions for stdglm objects — plot.stdglm","text":"x stdglm object. type character string indicating type plot generate. Options : tvc: Temporal effects varying coefficients. svc: Spatial effects varying coefficients. stvc: Spatio-temporal effects varying coefficients. fitted: Fitted values model. ... Additional arguments passed plotting functions.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting functions for stdglm objects — plot.stdglm","text":"ggplot object list ggplot objects, depending type plot.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting functions for stdglm objects — plot.stdglm","text":"plot.stdglm function dispatches appropriate plotting function based type argument.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/plot.stdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting functions for stdglm objects — plot.stdglm","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `mod` is a fitted stdglm object plot(mod, type = 'tvc')  # Plot temporal effects plot(mod, type = 'svc', Coo_sf_obs, region)  # Plot spatial effects,  # where `Coo_sf_obs` is a spatial object with observed coordinates and  # `region` is a spatial region object, both from the `sf` package. plot(mod, type = 'stvc', 1:4)  # Plot spatio-temporal effects plot(mod, type = 'fitted', Y, 1)  # Plot fitted values } # }"},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve predictions for stdglm objects — predict.stdglm","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"Extracts --sample predictions stdglm object.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"","code":"# S3 method for class 'stdglm' predict(object, type = \"response_mat\", Coo_sf_pred = NULL, ...)"},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"object stdglm object. type character string indicating type coefficients. Options : response_mat: Posterior mean predictive distribution response variable. Returns p_new--t_new matrix (default). response_df: Mean, standard deviation 95 % credible interval response variable (default). Returns dataframe. tvc: Mean, standard deviation 95 % credible interval temporal effects varying coefficients. svc: Mean, standard deviation 95 % credible interval spatial effects varying coefficients. stvc: Mean, standard deviation 95 % credible interval spatio-temporal effects varying coefficients. Coo_sf_pred simple feature object package sf prediction points, whose geometry used spatial effects (optional). ... Additional arguments (currently ignored).","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"Either matrix dataframe sf object posterior mean 95% credible interval bounds. function returns NULL predictions available stdglm object.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"Returns posterior mean predictive distribution associated 95% credible intervals --sample data points, random variable specified input type.","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/predict.stdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve predictions for stdglm objects — predict.stdglm","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `mod` is a fitted stdglm object predictions <- predict(mod) colMeans(predictions) # Get the average predictions across all locations pred_df <- predict(mod, type = 'response_df') head(pred_df) } # }"},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Algorithm — stdglm","title":"MCMC Algorithm — stdglm","text":"function executes Markov Chain Monte Carlo (MCMC) algorithm STDGLMs, .e. spatio-temporal dynamic (generalized) linear models.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Algorithm — stdglm","text":"","code":"stdglm(   y,   family = \"gaussian\",   X,   Z = NULL,   offset = NULL,   point.referenced = TRUE,   random.walk = FALSE,   interaction = TRUE,   n.harmonics = 0,   period = 0,   blocks_indices = NULL,   W,   W_pred = NULL,   W_cross = NULL,   X_pred = NULL,   Z_pred = NULL,   offset_pred = NULL,   ncores = NULL,   nrep = 100,   nburn = 100,   thin = 1,   print.interval = 10,   prior = NULL,   keepY = TRUE,   keepLogLik = TRUE,   last_run = NULL )"},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Algorithm — stdglm","text":"y p--t matrix corresponding response variable, p number spatial locations t number time points. Missing values (NA) allowed. family character string indicating family response variable. Currently, \"gaussian\" (default), \"poisson\", \"bernoulli\" supported. X p--t--ncovx array corresponding covariates whose effects vary across space time. Z p--t--ncovz array corresponding covariates whose effects constant across space time. Defaults NULL. offset p--t matrix corresponding offset term. NULL, set zero. point.referenced logical indicating whether data point-referenced (TRUE) areal (FALSE). Default TRUE. FALSE, predictions performed. random.walk logical indicating whether temporal dynamic modeled random walk (TRUE) first-order autoregressive process (FALSE). Default FALSE. interaction logical vector indicating whether include spatio-temporal interaction effect. Default TRUE, meaning covariates' effects allowed interact across space time. FALSE, interactions included. also possible pass logical vector length ncovx select specific interactions. n.harmonics scalar numeric vector length ncovx non-negative values modeling cyclic behavior temporal effects. stands number harmonics Fourier representation. scalar, 0 indicates seasonal behavior modeled. positive integer, seasonal behavior modeled temporal effects, input random.walk ignored. Using logic, numeric vector can provided select specific effects. Defaults 0. period scalar indicating period data, required modeling cyclic behavior. ignored whenever n.harmonics=0. Defaults 0. blocks_indices list integer vectors indicating indices blocks spatial predictions. Defaults NULL, predictions needed. See details. W p--p matrix corresponding spatial weights matrix. point.referenced TRUE, distance matrix among observed locations provided. point.referenced FALSE, 0/1 adjacency matrix provided. W_pred list p_b--p_b matrices corresponding distance matrix prediction locations b-th block, b 1:length(blocks_indices). NULL, predictions performed. W_cross list p--p_b matrices corresponding cross distances observed prediction locations b-th block. X_pred p_new--t_new--ncovx array corresponding covariates varying coefficients predictions, p_new total number prediction locations t_new=t+h_ahead, h_ahead>=0, number time points predictions made. Z_pred p_new--t_new--ncovz array corresponding covariates constant coefficients predictions. Defaults NULL. offset_pred p_new--t_new matrix corresponding offset term predictions. NULL, set zero. ncores integer indicating number cores parallelize spatial predictions. NULL, defaults 1. nrep integer indicating number iterations keep burn-. nburn integer indicating number iterations discard burn-. thin integer indicating thinning value. Default 1. print.interval integer indicating interval print progress messages. prior named list containing hyperparameters model. NULL, default non-informative hyperparameters used. See details. keepY logical indicating whether keep response variable output. Default TRUE. keepLogLik logical indicating whether keep log-likelihood output. Default TRUE. last_run optional list containing output previous run function, can used restore state sampler continue MCMC. Default NULL.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Algorithm — stdglm","text":"named list containing ave, stores posterior summaries, , stores MCMC samples. posterior summaries ave include: Yfitted_mean, Yfitted2_mean First two moments draws posterior predictive distribution observed data points. Ypred_mean, Ypred2_mean p_new--t_new matrices first two moments draws posterior predictive distribution new data points (--sample predictions required). B_postmean, B2_postmean First two moments overall effect varying coefficients. Btime_postmean, Btime2_postmean First two moments temporal effect varying coefficients. Bspace_postmean, Bspace2_postmean First two moments spatial effect varying coefficients. Bspacetime_postmean, Bspacetime2_postmean First two moments spatio-temporal effect varying coefficients. B2_c_t_s_st 2nd moment varying coefficients, \\(\\beta_{}\\). Btime_pred_postmean, Btime_pred2_postmean First two moments temporal effect varying coefficients predicted time points. Bspace_pred_postmean, Bspace_pred2_postmean First two moments spatial effect varying coefficients predicted spatial locations. Bspacetime_pred_postmean, Bspacetime_pred2_postmean First two moments spatio-temporal effect varying coefficients predicted spatial locations time points. B_pred2_c_t_s_st 2nd moment varying coefficients, \\(\\beta_{}\\), predicted spatial locations time points. meanY1mean Contribution covariates varying coefficients. meanZmean Contribution covariates non-varying effects, Z NULL. thetay_mean defined thetay_mean = meanY1mean + meanZmean + offset. Eta_tilde_mean Posterior mean linear predictor (non-gaussian outcomes). Poisson outcomes, defined Eta_tilde_mean = thetay_mean + epsilon, epsilon Gaussian error term. Bernoulli outcomes, obtained drawing truncated normal distribution mean thetay_mean. DIC, Dbar, pD Deviance Information Criterion, \\(DIC = \\bar{D} + pD\\). WAIC, se_WAIC, pWAIC, se_pWAIC, elpd, se_elpd Widely Applicable Information Criterion, penalty term, expected log pointwise predictive density. prefix se_ denotes standard errors. See Gelman et al. (2014). CRPS Continuous Ranked Probability Score, defined Gschlößl & Czado (2007). PMCC Predictive model choice criterion proposed Gelfand & Ghosh (1998). pvalue_* Bayesian p-values, see https://czaccard.github.io/STDGLM/articles/model_output.html. AccRate Point-wise acceptance rate random-walk Metropolis-Hastings step (family==\"poisson\"). Note criteria (DIC, WAIC, etc.) computed non-missing values response variable. MCMC chains included : sigma2 Measurement error variance. Bernoulli outcomes, fixed 1. sigma2_Btime J--nrep matrix variance innovation temporal effects j=1,...,J. j-th row corresponds temporal effect j-th varying coefficient. rho1_space, rho2_space J--nrep matrices spatial correlation parameters. j-th row corresponds spatial effect j-th varying coefficient. rho1_spacetime, rho2_spacetime J--nrep matrices correlation parameters spatially-structured innovations spatio-temporal effects. j-th row corresponds spatio-temporal effect j-th varying coefficient. phi_AR1_time, phi_AR1_spacetime J--nrep matrices AR(1) coefficients temporal effects j=1,...,J. j-th row corresponds temporal effect j-th varying coefficient. random.walk==TRUE, NULL. gamma Regression coefficients related covariates non-varying effects. loglik Pointwise log-likelihood, keepLogLik = TRUE. fitted Draws posterior predictive distribution observed data points, keepY = TRUE. Ypred Draws posterior predictive distribution --sample data points, keepY = TRUE. RMSE -sample Root Mean Squared Error, family != \"bernoulli\". MAE -sample Mean Absolute Error, family != \"bernoulli\". chi_sq_pred_, chi_sq_fitted_ Chi-square statistics (.e., sum squared Pearson residuals) predicted fitted values. contains also elements needed restarting.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Algorithm — stdglm","text":"fitted model following form: $$y_{} \\sim F$$ $$\\eta_{} = g(E( y_{} )) = \\boldsymbol{x}_{}' \\boldsymbol{\\beta}_{} + \\boldsymbol{z}_{}' \\boldsymbol{\\gamma} + \\epsilon_{}, \\quad \\epsilon_{} \\sim N(0, \\sigma_\\epsilon^2)$$ $$\\boldsymbol{\\beta}_{j, t} = \\boldsymbol{G}_{j,t} \\boldsymbol{\\beta}_{j, t-1} + \\boldsymbol{\\eta}_{j,t}, \\quad \\boldsymbol{\\eta}_{j,t} \\sim N_p(0, \\boldsymbol{\\Sigma}_{\\eta, j}), \\quad j=1, \\dots, J$$ either \\(\\boldsymbol{G}_{j,t} = \\phi_j^{(\\mathsf{T})} \\boldsymbol{}_p\\) \\(\\boldsymbol{G}_{j,t}\\) block diagonal harmonic matrices, \\(J=ncovx\\). function allows decomposition state vector components can interpreted contributions different sources variability, : $$\\beta_{} = \\overline{\\beta} + \\beta_{}^{(\\mathsf{S})} + \\beta_{t}^{(\\mathsf{T})} + \\beta_{}^{(\\mathsf{ST})}$$ : \\(\\overline{\\beta}\\) overall mean effect. \\(\\beta_{}^{(\\mathsf{S})}\\) spatial effect location \\(\\). \\(\\beta_{t}^{(\\mathsf{T})}\\) temporal effect time \\(t\\). \\(\\beta_{}^{(\\mathsf{ST})}\\) spatio-temporal effect location \\(\\) time \\(t\\). See package vignette details. prior must named list elements: V_beta_0 Either scalar numeric vector defining prior variance initial state time-varying coefficients, related covariates X. vector, must length equal ncovx, number covariates X. V_gamma scalar defining prior variance initial state constant coefficients, .e. constant effects covariates X related covariates Z. a_inn_time Either scalar numeric vector defining inverse-gamma prior shape temporal innovation variance time-varying coefficients. vector, must length equal ncovx, number covariates X. b_inn_time Either scalar numeric vector defining inverse-gamma prior rate temporal innovation variance time-varying coefficients. vector, must length equal ncovx, number covariates X. a_rho1s Either scalar numeric vector defining inverse-gamma prior shape partial sill spatial effects. vector, must length equal ncovx, number covariates X. b_rho1s Either scalar numeric vector defining inverse-gamma prior rate partial sill spatial effects. vector, must length equal ncovx, number covariates X. a_rho1st Either scalar numeric vector defining inverse-gamma prior shape partial sill spatio-temporal effects (interaction==TRUE). vector, must length equal ncovx, number covariates X. b_rho1st Either scalar numeric vector defining inverse-gamma prior rate partial sill spatio-temporal effects (interaction==TRUE). vector, must length equal ncovx, number covariates X. s2_a scalar defining inverse-gamma prior shape measurement error variance (family!=\"bernoulli\"). s2_b scalar defining inverse-gamma prior rate measurement error variance (family!=\"bernoulli\"). ctuning scalar defining tuning parameter random walk proposal distribution (family==\"poisson\"). --sample predictions performed point.referenced TRUE W_pred provided. spatial interpolation space-varying coefficients, computations performed block-wise. blocks_indices list disjoint sets indices specifying block membership new spatial location. b-th element list p_b new spatial locations, total number new spatial locations p_new, given sum p_b blocks. W_pred W_cross must lists length equal length(blocks_indices). perform computations parallel, ncores must greater 1.  temporal predictions time-varying coefficients, suffices t_new>t.","code":""},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC Algorithm — stdglm","text":"Gelfand, . E., & Ghosh, S. K. (1998). Model choice: minimum posterior predictive loss approach. Biometrika, 85(1), 1-11.  Gelman, ., Carlin, J. B., Stern, H. S., & Rubin, D. B. (2014). Bayesian data analysis (3rd ed.). Chapman Hall/CRC.  Gschlößl, S., & Czado, C. (2007). Spatial modelling claim frequency claim size non-life insurance. Scandinavian Actuarial Journal, 2007(3), 202–225. doi:10.1080/03461230701414764","code":""},{"path":[]},{"path":"https://czaccard.github.io/STDGLM/reference/stdglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Algorithm — stdglm","text":"","code":"if (FALSE) { # \\dontrun{ data(ApuliaAQ, package = \"STDGLM\") p = length(unique(ApuliaAQ$AirQualityStation)) # 51 t = length(unique(ApuliaAQ$time))              # 365  # distance matrix W = as.matrix(dist(cbind(ApuliaAQ$Longitude[1:p], ApuliaAQ$Latitude[1:p])))  # response variable: temperature y = matrix(ApuliaAQ$CL_t2m, p, t) # covariates with spacetime-varying coefficients: intercept + altitude X = array(1, dim = c(p, t, 2)) X[,,2] = matrix(ApuliaAQ$Altitude, p, t)  mod <- stdglm(y=y, X=X, W=W, interaction = FALSE)  # Model with spacetime-varying intercept, but fixed altitude effect mod2 <- stdglm(y=y, X=X[,,1,drop=FALSE], Z=X[,,2,drop=FALSE], W=W, interaction = FALSE) } # }"},{"path":"https://czaccard.github.io/STDGLM/news/index.html","id":"stdglm-020","dir":"Changelog","previous_headings":"","what":"STDGLM 0.2.0","title":"STDGLM 0.2.0","text":"Added option cyclic behavior temporal effects.","code":""},{"path":"https://czaccard.github.io/STDGLM/news/index.html","id":"stdglm-011","dir":"Changelog","previous_headings":"","what":"STDGLM 0.1.1","title":"STDGLM 0.1.1","text":"Added non-Gaussian responses (Bernoulli Poisson).","code":""},{"path":"https://czaccard.github.io/STDGLM/news/index.html","id":"stdglm-0009000","dir":"Changelog","previous_headings":"","what":"STDGLM 0.0.0.9000","title":"STDGLM 0.0.0.9000","text":"Initial development release.","code":""}]
