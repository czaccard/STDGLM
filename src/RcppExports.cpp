// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dlm_cpp
Rcpp::List dlm_cpp(const Eigen::MatrixXd& Y, const std::vector<Eigen::MatrixXd>& X, const Rcpp::Nullable<Rcpp::List> Z_nullable, const Eigen::MatrixXd& offset, const bool& point_referenced, const bool& random_walk, const Eigen::MatrixXd& W_dense, const Eigen::MatrixXd& W_pred_dense, const Eigen::MatrixXd& W_cross_dense, const Rcpp::Nullable<Rcpp::List> X_pred_nullable, const Rcpp::Nullable<Rcpp::List> Z_pred_nullable, const Eigen::MatrixXd& offset_pred, const int& nrep, const int& nburn, const int& thin, const int& print_interval, const double& V_beta_0, const double& V_gamma, const double& a1, const double& b1, const double& s2_a, const double& s2_b, const bool& keepY, const bool& keepLogLik, Rcpp::Nullable<Rcpp::List> out_prev_nullable);
RcppExport SEXP _STDGLM_dlm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP Z_nullableSEXP, SEXP offsetSEXP, SEXP point_referencedSEXP, SEXP random_walkSEXP, SEXP W_denseSEXP, SEXP W_pred_denseSEXP, SEXP W_cross_denseSEXP, SEXP X_pred_nullableSEXP, SEXP Z_pred_nullableSEXP, SEXP offset_predSEXP, SEXP nrepSEXP, SEXP nburnSEXP, SEXP thinSEXP, SEXP print_intervalSEXP, SEXP V_beta_0SEXP, SEXP V_gammaSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP s2_aSEXP, SEXP s2_bSEXP, SEXP keepYSEXP, SEXP keepLogLikSEXP, SEXP out_prev_nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type Z_nullable(Z_nullableSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const bool& >::type point_referenced(point_referencedSEXP);
    Rcpp::traits::input_parameter< const bool& >::type random_walk(random_walkSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W_dense(W_denseSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W_pred_dense(W_pred_denseSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W_cross_dense(W_cross_denseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type X_pred_nullable(X_pred_nullableSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type Z_pred_nullable(Z_pred_nullableSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type offset_pred(offset_predSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< const int& >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type print_interval(print_intervalSEXP);
    Rcpp::traits::input_parameter< const double& >::type V_beta_0(V_beta_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type V_gamma(V_gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< const double& >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type s2_a(s2_aSEXP);
    Rcpp::traits::input_parameter< const double& >::type s2_b(s2_bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type keepY(keepYSEXP);
    Rcpp::traits::input_parameter< const bool& >::type keepLogLik(keepLogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type out_prev_nullable(out_prev_nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(dlm_cpp(Y, X, Z_nullable, offset, point_referenced, random_walk, W_dense, W_pred_dense, W_cross_dense, X_pred_nullable, Z_pred_nullable, offset_pred, nrep, nburn, thin, print_interval, V_beta_0, V_gamma, a1, b1, s2_a, s2_b, keepY, keepLogLik, out_prev_nullable));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_STDGLM_dlm_cpp", (DL_FUNC) &_STDGLM_dlm_cpp, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_STDGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
